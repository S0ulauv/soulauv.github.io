<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>my friend zhou</title>
    <url>/2020/01/16/my-friend-zhou/</url>
    <content><![CDATA[<p>my dear friend zhou<br><img src="soulauv.pic/RBA~DN$11%5BH%7B~4%9K@FL%7DHX.jpg" alt></p>]]></content>
  </entry>
  <entry>
    <title>Windows环境下搭建hexo框架博客</title>
    <url>/2020/01/16/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Windows10下搭建hexo博客"><a href="#Windows10下搭建hexo博客" class="headerlink" title="Windows10下搭建hexo博客"></a>Windows10下搭建hexo博客</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ol>
<li>进入<a href="https://git-scm.com/" target="_blank" rel="noopener">Git官网</a>,或直接<a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/23216272/71c5a100-00d6-11ea-822c-0617e3aba1d7?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20191113%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20191113T023831Z&X-Amz-Expires=300&X-Amz-Signature=0b309a0c0ffa097c60e68638cf898450ed5aadb34a9dfa912eff45d610bac9c5&X-Amz-SignedHeaders=host&actor_id=57254384&response-content-disposition=attachment%3B%20filename%3DGit-2.24.0.2-64-bit.exe&response-content-type=application%2Foctet-stream" target="_blank" rel="noopener">点击此处</a>开始下载</li>
<li>全部默认安装</li>
<li>安装完成后会在开始菜单出现<br><img src="https://pic-soulauv.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720191113104603.png" alt></li>
</ol><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ol>
<li>进入<a href="http://nodejs.cn/" target="_blank" rel="noopener">nodejs中文网</a>，或<a href="https://npm.taobao.org/mirrors/node/v12.13.0/node-v12.13.0-x64.msi" target="_blank" rel="noopener">点击此处</a>下载64位安装包</li>
<li>全部默认安装</li>
<li>打开上一步图片中的Git Bash，输入  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li>
<li>查看nodejs是否安装成功<br>若结果出现  <img src="https://pic-soulauv.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720191113105727.png" alt>]<br>则安装成功</li>
</ol><a id="more"></a>

<h2 id="全局安装cnpm"><a href="#全局安装cnpm" class="headerlink" title="全局安装cnpm"></a>全局安装cnpm</h2><ol>
<li>在Git Bash下输入   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
 等待安装完成  </li>
<li>输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure>
若出现版本号则安装成功  <img src="https://pic-soulauv.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720191113110535.png" alt></li>
</ol>
<h2 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h2><ol>
<li>输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
进行安装</li>
<li>输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
若出现版本号则安装成功<br><img src="https://pic-soulauv.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720191113110916.png" alt></li>
</ol>
<h2 id="初始化hexo博客"><a href="#初始化hexo博客" class="headerlink" title="初始化hexo博客"></a>初始化hexo博客</h2><ol>
<li><p>在某一位置(如在D盘根目录下)新建一文件夹(如命名为 hexo)<img src="https://pic-soulauv.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720191113111428.png" alt></p>
</li>
<li><p>右键打开Git Bash<br>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p> 此时文件夹中出现以下内容  <img src="https://pic-soulauv.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720191113111827.png" alt></p>
</li>
</ol>
<ol start="3">
<li><p>启动博客<br>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p> 出现<br> <img src="https://pic-soulauv.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720191113112223.png" alt></p>
<p> 将’’<a href="http://localhost:4000&quot;输入浏览器网址框中即可在本地访问" target="_blank" rel="noopener">http://localhost:4000&quot;输入浏览器网址框中即可在本地访问</a></p>
</li>
<li><p>输入”Crtl + C”断开</p>
</li>
</ol>
<h2 id="将hexo博客部署到Github上"><a href="#将hexo博客部署到Github上" class="headerlink" title="将hexo博客部署到Github上"></a>将hexo博客部署到Github上</h2><ol>
<li><p>创建自己的Github账号后在页面右上角点击New repository新建一个仓库 <img src="https://pic-soulauv.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720191113112758.png" alt></p>
</li>
<li><p>按照下图格式进行命名  <img src="https://pic-soulauv.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720191113113044.png" alt><br>最好和用户名相同</p>
</li>
<li><p>在hexo目录下安装deployer插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li>
<li><p>设置_config.yml 文件<br>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure>
<p>在文件最底部内容按图进行配置  <img src="https://pic-soulauv.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720191113113710.png" alt></p>
<p> 启动第二项 repo 为你的GitHub仓库地址位置如下图所示，复制粘贴即可<img src="https://pic-soulauv.oss-cn-beijing.aliyuncs.com/TIM%E5%9B%BE%E7%89%8720191113113829.png" alt></p>
</li>
<li><p>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java 学习笔记(一)</title>
    <url>/2019/12/03/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="JDK-JRE-JVM-的关系"><a href="#JDK-JRE-JVM-的关系" class="headerlink" title="JDK JRE JVM 的关系"></a>JDK JRE JVM 的关系</h2><ul>
<li>JVM(Java Virtual Machine)即Java虚拟机,Java技术的核心,与Java最重要的跨平台特性息息相关</li>
<li>JDK(Java Development Kit)即Java开发工具包</li>
<li>JRE(Java Runtime Environment)即Java运行环境   </li>
</ul><a id="more"></a>
<hr>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>定义变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>   <span class="comment">//数据类型 变量名称</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>final 关键字声明常量属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>; <span class="comment">//声明一个名为PI的常量并赋值为3.14</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
<th>存储格式</th>
<th>数据范围</th>
<th>包装类型</th>
</tr>
</thead>
<tbody><tr>
<td>short</td>
<td>0</td>
<td>2B</td>
<td>-32,768 ~ 32,767</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>0</td>
<td>4B</td>
<td>-2,147,483,648 ~ 2,147,483,647</td>
<td>Integer</td>
</tr>
<tr>
<td>byte</td>
<td>0</td>
<td>1B</td>
<td>-128 ~ 127</td>
<td>Byte</td>
</tr>
<tr>
<td>char</td>
<td>空</td>
<td>2B</td>
<td>0 ~ 65535</td>
<td>Character</td>
</tr>
<tr>
<td>long</td>
<td>0L或0l</td>
<td>8B</td>
<td>-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>0.0F或0.0f</td>
<td>4B</td>
<td>32位IEEE-754单精度范围</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>0.0或0.0D(d)</td>
<td>8B</td>
<td>64位IEEE-754双精度范围</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>false</td>
<td>1B</td>
<td>true 或 false</td>
<td>Boolean</td>
</tr>
</tbody></table>
<hr>
<h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>byte, short. int, long</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> num = <span class="number">1L</span>;</span><br></pre></td></tr></table></figure>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>float, double</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> num = <span class="number">7.2F</span> <span class="comment">//double 类型可以不加d</span></span><br></pre></td></tr></table></figure>
<h2 id="char"><a href="#char" class="headerlink" title="char"></a>char</h2><p>char 表示单个字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="string">'a'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h2><p>仅有true 或者 false</p>
<hr>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li>初始化<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s0 = <span class="string">"abc"</span>;</span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure></li>
<li>计算字符串的长度<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//length 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">String s1 = <span class="string">"abc"</span>;</span><br><span class="line">String s2 = <span class="string">"Java"</span>;</span><br><span class="line"><span class="keyword">int</span> len1 = s1.length();</span><br><span class="line"><span class="keyword">int</span> len2 = s2.length();</span><br></pre></td></tr></table></figure></li>
<li>字符串比较<br>equals() 方法: 判断两个字符串对象的内容是否相同( 同则返回true; 不同则返回false )<br>equalsIgnoreCase()方法: 忽略大小写<br>concat()方法: 连接字符串<br>charAt()方法: 按照索引值, 获得字符串中的指定字符<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringCompare</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s = <span class="keyword">new</span> String(<span class="string">"Java"</span>);<span class="comment">//定义字符串方法1,定义s并初始化为Java</span></span><br><span class="line">        String m = <span class="string">"java"</span>;<span class="comment">//定义字符串2,定义m并初始化为java</span></span><br><span class="line">        System.out.println(s.equals(m));<span class="comment">//不忽略大小写</span></span><br><span class="line">        System.out.println(s.equalsIgnoreCase(m));<span class="comment">//忽略大小写</span></span><br><span class="line">        System.out.println(s == m);<span class="comment">//比较内存地址是否相同</span></span><br><span class="line">        System.out.println(<span class="string">"Hello"</span> + <span class="string">"java"</span>);<span class="comment">//字符串连接方法1</span></span><br><span class="line">        System.out.println(s.concat(m));<span class="comment">//字符串连接方法2concat()方法</span></span><br><span class="line">        System.out.println(s.charAt(<span class="number">1</span>));<span class="comment">//输出字符串中索引值为1的字符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>字符串常用提取方法<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>indexOf(int ch)</td>
<td>int</td>
<td>搜索字符 ch 第一次出现的索引</td>
</tr>
<tr>
<td>indexOf(String value)</td>
<td>int</td>
<td>搜索字符串 value 第一次出现的索引</td>
</tr>
<tr>
<td>lastIndexOf(int ch)</td>
<td>int</td>
<td>搜索字符串 ch 最后一次出现的索引</td>
</tr>
<tr>
<td>LastIndexOf(String value)</td>
<td>int</td>
<td>搜索字符串 value 最后一次出现的索引</td>
</tr>
<tr>
<td>substring(int index)</td>
<td>String</td>
<td>提取从索引开始到结束的字符串</td>
</tr>
<tr>
<td>substring(int beginindex, int endindex)</td>
<td>String</td>
<td>提取 beginindex 和 endindex 之间的字符串部分</td>
</tr>
<tr>
<td>trim()</td>
<td>String</td>
<td>返回一个前后不含任何空格的调用字符串的副本</td>
</tr>
</tbody></table>
</li>
</ul>
<hr>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><table>
<thead>
<tr>
<th>算术运算符</th>
<th>名称</th>
<th>描述</th>
<th>类型</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法</td>
<td>相加运算符两侧的值</td>
<td>双目运算符</td>
<td>a + b = 8</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td>左操作数减去右操作数</td>
<td>双目运算符</td>
<td>a - b = 2</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td>相乘操作符两侧的值</td>
<td>双目运算符</td>
<td>a * b = 15</td>
</tr>
<tr>
<td>/</td>
<td>除法</td>
<td>左操作数除以右操作数</td>
<td>双目运算符</td>
<td>a / b = 1</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td>左操作数除以右操作数的余数</td>
<td>双目运算符</td>
<td>a % b = 2</td>
</tr>
<tr>
<td>++</td>
<td>自增</td>
<td>操作数的值增加1</td>
<td>单目运算符</td>
<td>++i = 2</td>
</tr>
<tr>
<td>–</td>
<td>自减</td>
<td>操作数的值减少1</td>
<td>单目运算符</td>
<td>–i = 0</td>
</tr>
</tbody></table>
<ul>
<li>++i, –i: 先自增或自减,再进行表达式运算</li>
<li>i++, –i: 先进行表达式运算,再自增或自减</li>
</ul>
<hr>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>表格中a = 60, b = 13    </p>
<table>
<thead>
<tr>
<th>位运算符</th>
<th>名称</th>
<th>描述</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>按位与</td>
<td>同 1 则 1, 否则为 0</td>
<td>(a &amp; b), 得到 12, 即 0000 1100</td>
</tr>
<tr>
<td>|</td>
<td>按位或</td>
<td>同 0 则 0, 否则为 1</td>
<td>(a</td>
</tr>
<tr>
<td>^</td>
<td>按位异或</td>
<td>同 0 异 1</td>
<td>(a ^ b), 得到 49, 即 0011 0001</td>
</tr>
<tr>
<td>~</td>
<td>按位补</td>
<td>翻转操作数的每一位</td>
<td>(~a), 得到 -61, 即 1100 0011</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>按位左移</td>
<td>左操作数按位左移右操作数指定的位数</td>
<td>a &gt;&gt; 2 得到240, 即 1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>按位右移</td>
<td>左操作数按位右移右操作数指定的位数</td>
<td>a &lt;&lt; 2 得到 15, 即 1111</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>按位右移补零</td>
<td>左操作数的值按右操作数指定的位数右移, 空位补零</td>
<td>a &gt;&gt;&gt; 2 得到 15, 即 0000 1111</td>
</tr>
</tbody></table>
<hr>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>表格中 a = true, b = false</p>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>名称</th>
<th>描述</th>
<th>类型</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>同真则真, 否则为假</td>
<td>双目运算符</td>
<td>(a &amp;&amp; b) 为假</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>有真就真, 有假必假</td>
<td>双目运算符</td>
<td>(a</td>
</tr>
<tr>
<td>!</td>
<td>非</td>
<td>非真为假, 非假为真</td>
<td>单目运算符</td>
<td>(!a) 为假</td>
</tr>
<tr>
<td>^</td>
<td>异或</td>
<td>同则假, 否则为真</td>
<td>双目运算符</td>
<td>(a ^ b) 为真</td>
</tr>
</tbody></table>
<hr>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table>
<thead>
<tr>
<th>比较运算符</th>
<th>名称</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>等于</td>
</tr>
<tr>
<td>! =</td>
<td>不等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>- 双目运算符: 布尔表达式? 表达式 1 : 表达式 2</td>
<td></td>
</tr>
<tr>
<td>如果布尔表达式的值为true 则执行表达式1, 否则执行表达式2</td>
<td></td>
</tr>
<tr>
<td>- ==和!=适用于所有的基本数据类型，其他关系运算符不适用于boolean，因为 boolean 值只有true和false，比较没有任何意义。</td>
<td></td>
</tr>
<tr>
<td>- ==和!=也适用于所有对象，可以比较对象的引用是否相同。</td>
<td></td>
</tr>
</tbody></table>
<hr>
<h2 id="方法-函数"><a href="#方法-函数" class="headerlink" title="方法(函数)"></a>方法(函数)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">访问修饰符 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">functionName</span><span class="params">(Object arg)</span></span>&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><p>if 语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    条件成立时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if else 语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    代码块<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    代码块<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多重 if 语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    代码块<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">    代码块<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    代码块n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        代码块<span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        代码块<span class="number">2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    dafult:</span><br><span class="line">        默认执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="while-语法"><a href="#while-语法" class="headerlink" title="while 语法"></a>while 语法</h2><p>先判断, 在执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="do-while-语法"><a href="#do-while-语法" class="headerlink" title="do-while 语法"></a>do-while 语法</h2><p>先执行, 再判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    代码块</span><br><span class="line">&#125;<span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure>
<h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(循环变量初始化; 循环条件; 循环变量变化)&#123;</span><br><span class="line">    循环操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h2><p>break: 用于条件和循环语句中, 用来跳出循环语句<br>continue: 跳过循环体中剩余的语句执行下一次循环</p>
<hr>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>相同数据类型的元素按一定顺序排列的集合。    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明数组</span></span><br><span class="line">数据类型[] 数组名;<span class="comment">//或者： 数据类型 数组名[]</span></span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="keyword">int</span> args[];</span><br><span class="line"><span class="keyword">char</span> symbol[];</span><br><span class="line">String [] name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line">数组名 = <span class="keyword">new</span> 数据类型 [数组长度];</span><br><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="keyword">int</span> [] ages = &#123;<span class="number">12</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">33</span>, <span class="number">45</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> [] symbol = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过下标访问数组元素</span></span><br><span class="line">ages[<span class="number">0</span>] = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个数组赋值给另一个数组</span></span><br><span class="line"><span class="keyword">int</span> [] a1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> [] a2;</span><br><span class="line">a2 = a1;<span class="comment">//a1和a2是同一数组的不同名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组遍历</span></span><br><span class="line"><span class="keyword">int</span> [] ages = &#123;<span class="number">12</span>, <span class="number">21</span>, <span class="number">2</span>, <span class="number">43</span>, <span class="number">23</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ages.length; i++)&#123;</span><br><span class="line">    System.out.println(ages[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//foreach 方法</span></span><br><span class="line"><span class="keyword">int</span> [] ages = &#123;<span class="number">12</span>, <span class="number">21</span>, <span class="number">2</span>, <span class="number">43</span>, <span class="number">23</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> age:ages)&#123;</span><br><span class="line">    System.out.println(age);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明和定义</span></span><br><span class="line">数据类型 [] [] 数组名 = <span class="keyword">new</span> 数据类型[行的个数][列的个数]；</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">数据类型 [] [] 数组名；</span><br><span class="line">数组名 = <span class="keyword">new</span> 数据类型[行的个数][列的个数]；</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">数据类型 [] [] = 数组名 = &#123;</span><br><span class="line">&#123;第一行值<span class="number">1</span>， 第一行值<span class="number">2</span>, ...&#125;</span><br><span class="line">&#123;第二行值<span class="number">1</span>， 第二行值<span class="number">2</span>，...&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过下标访问二维数组</span></span><br><span class="line">数组名[行的索引][列的索引] = 值;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>各类快捷键</title>
    <url>/2019/12/01/%E5%90%84%E7%B1%BB%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h2 id="VS-code-常用快捷键"><a href="#VS-code-常用快捷键" class="headerlink" title="VS code 常用快捷键"></a>VS code 常用快捷键</h2><table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Shift + V</td>
<td>预览Markdown 文档</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>批量注释批量取消注释</td>
</tr>
<tr>
<td>Ctrl + k 接Ctrl + t</td>
<td>更换主题</td>
</tr>
<tr>
<td>Ctrl + Shift + P</td>
<td>打开命令行</td>
</tr>
</tbody></table><h2 id="Markdown-常用操作"><a href="#Markdown-常用操作" class="headerlink" title="Markdown 常用操作"></a>Markdown 常用操作</h2><table>
<thead>
<tr>
<th>操作</th>
<th>目的</th>
</tr>
</thead>
<tbody><tr>
<td>![avatar](图片路径)</td>
<td>插入图片</td>
</tr>
<tr>
<td>```  ```</td>
<td>连续三个反引号间插入代码块</td>
</tr>
<tr>
<td>```java ```</td>
<td>```后键入所使用语言实现代码高亮</td>
</tr>
</tbody></table><a id="more"></a>

<h2 id="Linux-常用快捷键"><a href="#Linux-常用快捷键" class="headerlink" title="Linux 常用快捷键"></a>Linux 常用快捷键</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
<th>全称</th>
</tr>
</thead>
<tbody><tr>
<td>touch</td>
<td>创建新文件</td>
<td></td>
</tr>
</tbody></table>
<h2 id="Windows下常用快捷键"><a href="#Windows下常用快捷键" class="headerlink" title="Windows下常用快捷键"></a>Windows下常用快捷键</h2><table>
<thead>
<tr>
<th>按键</th>
<th>作用</th>
<th>全称</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Win + →</td>
<td>切换桌面</td>
<td></td>
</tr>
<tr>
<td>Win + V</td>
<td>打开剪切板</td>
<td></td>
</tr>
<tr>
<td>Tab</td>
<td>制表键</td>
<td>Tabulator key</td>
</tr>
<tr>
<td>Ctrl + Shift + B</td>
<td>唤出Win10 表情输入界面</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>VS code</tag>
      </tags>
  </entry>
</search>
