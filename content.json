{"meta":{"title":"Soulauv's Blog","subtitle":"","description":"BE YOUR HERO","author":"Soulauv","url":"https://www.soulauv.cn","root":"/"},"pages":[{"title":"分类","date":"2019-11-17T09:17:24.000Z","updated":"2019-11-17T09:18:17.067Z","comments":true,"path":"categories/index.html","permalink":"https://www.soulauv.cn/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-11-17T09:19:45.000Z","updated":"2019-11-17T09:20:17.945Z","comments":true,"path":"tags/index.html","permalink":"https://www.soulauv.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"my friend zhou","slug":"my-friend-zhou","date":"2020-01-16T06:41:41.000Z","updated":"2020-01-16T06:42:15.930Z","comments":true,"path":"2020/01/16/my-friend-zhou/","link":"","permalink":"https://www.soulauv.cn/2020/01/16/my-friend-zhou/","excerpt":"","text":"my dear friend zhou","categories":[],"tags":[]},{"title":"Windows环境下搭建hexo框架博客","slug":"Windows环境下搭建hexo框架博客","date":"2020-01-16T06:14:08.953Z","updated":"2020-01-16T06:39:45.646Z","comments":true,"path":"2020/01/16/Windows环境下搭建hexo框架博客/","link":"","permalink":"https://www.soulauv.cn/2020/01/16/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAhexo%E6%A1%86%E6%9E%B6%E5%8D%9A%E5%AE%A2/","excerpt":"Windows10下搭建hexo博客安装Git 进入Git官网,或直接点击此处开始下载 全部默认安装 安装完成后会在开始菜单出现 安装nodejs 进入nodejs中文网，或点击此处下载64位安装包 全部默认安装 打开上一步图片中的Git Bash，输入 12node -vnpm -v 查看nodejs是否安装成功若结果出现 ]则安装成功","text":"Windows10下搭建hexo博客安装Git 进入Git官网,或直接点击此处开始下载 全部默认安装 安装完成后会在开始菜单出现 安装nodejs 进入nodejs中文网，或点击此处下载64位安装包 全部默认安装 打开上一步图片中的Git Bash，输入 12node -vnpm -v 查看nodejs是否安装成功若结果出现 ]则安装成功 全局安装cnpm 在Git Bash下输入 1npm install -g cnpm --registry=https://registry.npm.taobao.org 等待安装完成 输入1cnpm -v 若出现版本号则安装成功 安装hexo框架 输入1cnpm install -g hexo-cli 进行安装 输入1hexo -v 若出现版本号则安装成功 初始化hexo博客 在某一位置(如在D盘根目录下)新建一文件夹(如命名为 hexo) 右键打开Git Bash输入 1hexo init 此时文件夹中出现以下内容 启动博客输入 1hexo s 出现 将’’http://localhost:4000&quot;输入浏览器网址框中即可在本地访问 输入”Crtl + C”断开 将hexo博客部署到Github上 创建自己的Github账号后在页面右上角点击New repository新建一个仓库 按照下图格式进行命名 最好和用户名相同 在hexo目录下安装deployer插件 1cnpm install --save hexo-deployer-git 设置_config.yml 文件输入 1vim _config.yml 在文件最底部内容按图进行配置 启动第二项 repo 为你的GitHub仓库地址位置如下图所示，复制粘贴即可 输入 1hexo d 大功告成","categories":[],"tags":[]},{"title":"Java 学习笔记(一)","slug":"Java-学习笔记","date":"2019-12-03T07:25:38.000Z","updated":"2019-12-04T12:30:44.555Z","comments":true,"path":"2019/12/03/Java-学习笔记/","link":"","permalink":"https://www.soulauv.cn/2019/12/03/Java-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"JDK JRE JVM 的关系 JVM(Java Virtual Machine)即Java虚拟机,Java技术的核心,与Java最重要的跨平台特性息息相关 JDK(Java Development Kit)即Java开发工具包 JRE(Java Runtime Environment)即Java运行环境","text":"JDK JRE JVM 的关系 JVM(Java Virtual Machine)即Java虚拟机,Java技术的核心,与Java最重要的跨平台特性息息相关 JDK(Java Development Kit)即Java开发工具包 JRE(Java Runtime Environment)即Java运行环境 Hello World12345public class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println(\"HelloWorld\"); &#125;&#125; 变量定义变量 1int a = 1 //数据类型 变量名称 常量final 关键字声明常量属性 1final double PI = 3.14; //声明一个名为PI的常量并赋值为3.14 数据类型 数据类型 默认值 存储格式 数据范围 包装类型 short 0 2B -32,768 ~ 32,767 Short int 0 4B -2,147,483,648 ~ 2,147,483,647 Integer byte 0 1B -128 ~ 127 Byte char 空 2B 0 ~ 65535 Character long 0L或0l 8B -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807 Long float 0.0F或0.0f 4B 32位IEEE-754单精度范围 Float double 0.0或0.0D(d) 8B 64位IEEE-754双精度范围 Double boolean false 1B true 或 false Boolean 整数byte, short. int, long 1long num = 1L; 浮点数float, double 1float num = 7.2F //double 类型可以不加d charchar 表示单个字符 1char a = 'a'; boolean仅有true 或者 false 字符串 初始化12String s0 = \"abc\";String s1 = new String(\"abc\"); 计算字符串的长度12345678//length 方法public int length()&#123;&#125;//调用方法String s1 = \"abc\";String s2 = \"Java\";int len1 = s1.length();int len2 = s2.length(); 字符串比较equals() 方法: 判断两个字符串对象的内容是否相同( 同则返回true; 不同则返回false )equalsIgnoreCase()方法: 忽略大小写concat()方法: 连接字符串charAt()方法: 按照索引值, 获得字符串中的指定字符123456789101112public class StringCompare &#123; public static void main(String[] args)&#123; String s = new String(\"Java\");//定义字符串方法1,定义s并初始化为Java String m = \"java\";//定义字符串2,定义m并初始化为java System.out.println(s.equals(m));//不忽略大小写 System.out.println(s.equalsIgnoreCase(m));//忽略大小写 System.out.println(s == m);//比较内存地址是否相同 System.out.println(\"Hello\" + \"java\");//字符串连接方法1 System.out.println(s.concat(m));//字符串连接方法2concat()方法 System.out.println(s.charAt(1));//输出字符串中索引值为1的字符 &#125;&#125; 字符串常用提取方法 方法 返回值 功能描述 indexOf(int ch) int 搜索字符 ch 第一次出现的索引 indexOf(String value) int 搜索字符串 value 第一次出现的索引 lastIndexOf(int ch) int 搜索字符串 ch 最后一次出现的索引 LastIndexOf(String value) int 搜索字符串 value 最后一次出现的索引 substring(int index) String 提取从索引开始到结束的字符串 substring(int beginindex, int endindex) String 提取 beginindex 和 endindex 之间的字符串部分 trim() String 返回一个前后不含任何空格的调用字符串的副本 算术运算符 算术运算符 名称 描述 类型 举例 + 加法 相加运算符两侧的值 双目运算符 a + b = 8 - 减法 左操作数减去右操作数 双目运算符 a - b = 2 * 乘法 相乘操作符两侧的值 双目运算符 a * b = 15 / 除法 左操作数除以右操作数 双目运算符 a / b = 1 % 取余 左操作数除以右操作数的余数 双目运算符 a % b = 2 ++ 自增 操作数的值增加1 单目运算符 ++i = 2 – 自减 操作数的值减少1 单目运算符 –i = 0 ++i, –i: 先自增或自减,再进行表达式运算 i++, –i: 先进行表达式运算,再自增或自减 位运算符表格中a = 60, b = 13 位运算符 名称 描述 举例 &amp; 按位与 同 1 则 1, 否则为 0 (a &amp; b), 得到 12, 即 0000 1100 | 按位或 同 0 则 0, 否则为 1 (a ^ 按位异或 同 0 异 1 (a ^ b), 得到 49, 即 0011 0001 ~ 按位补 翻转操作数的每一位 (~a), 得到 -61, 即 1100 0011 &lt;&lt; 按位左移 左操作数按位左移右操作数指定的位数 a &gt;&gt; 2 得到240, 即 1111 0000 &gt;&gt; 按位右移 左操作数按位右移右操作数指定的位数 a &lt;&lt; 2 得到 15, 即 1111 &gt;&gt;&gt; 按位右移补零 左操作数的值按右操作数指定的位数右移, 空位补零 a &gt;&gt;&gt; 2 得到 15, 即 0000 1111 逻辑运算符表格中 a = true, b = false 逻辑运算符 名称 描述 类型 举例 &amp;&amp; 与 同真则真, 否则为假 双目运算符 (a &amp;&amp; b) 为假 || 或 有真就真, 有假必假 双目运算符 (a ! 非 非真为假, 非假为真 单目运算符 (!a) 为假 ^ 异或 同则假, 否则为真 双目运算符 (a ^ b) 为真 比较运算符 比较运算符 名称 == 等于 ! = 不等于 &gt; 大于 &lt; 小于 &gt;= 大于等于 &lt;= 小于等于 - 双目运算符: 布尔表达式? 表达式 1 : 表达式 2 如果布尔表达式的值为true 则执行表达式1, 否则执行表达式2 - ==和!=适用于所有的基本数据类型，其他关系运算符不适用于boolean，因为 boolean 值只有true和false，比较没有任何意义。 - ==和!=也适用于所有对象，可以比较对象的引用是否相同。 方法(函数)123访问修饰符 返回值类型 方法名(参数列表)&#123; 方法体&#125; 如 123public void functionName(Object arg)&#123; 方法体&#125; if 语句if 语句 123if(条件)&#123; 条件成立时执行的代码&#125; if else 语句 123456if(条件)&#123; 代码块1&#125;else&#123; 代码块2&#125; 多重 if 语句 12345678910if(条件1)&#123; 代码块1&#125;else if(条件2)&#123; 代码块2&#125;...else&#123; 代码块n&#125; switch 语句1234567891011switch(表达式)&#123; case 值1: 代码块1 break; case 值2: 代码块2 break; ... dafult: 默认执行的代码块&#125; while 语法先判断, 在执行 123while(条件)&#123; 代码块&#125; do-while 语法先执行, 再判断 123do&#123; 代码块&#125;while(条件); for 语句123for(循环变量初始化; 循环条件; 循环变量变化)&#123; 循环操作&#125; 跳转语句break: 用于条件和循环语句中, 用来跳出循环语句continue: 跳过循环体中剩余的语句执行下一次循环 数组相同数据类型的元素按一定顺序排列的集合。 12345678910111213141516171819202122232425262728293031323334//声明数组数据类型[] 数组名;//或者： 数据类型 数组名[]//例子int args[];char symbol[];String [] name;//定义数组数组名 = new 数据类型 [数组长度];//例子int [] ages = &#123;12, 18, 9, 33, 45&#125;;char [] symbol = new char[10];//通过下标访问数组元素ages[0] = 12;//将一个数组赋值给另一个数组int [] a1 = &#123;1, 2, 3&#125;;int [] a2;a2 = a1;//a1和a2是同一数组的不同名称//数组遍历int [] ages = &#123;12, 21, 2, 43, 23&#125;;for(int i = 0; i &lt; ages.length; i++)&#123; System.out.println(ages[i]);&#125;//foreach 方法int [] ages = &#123;12, 21, 2, 43, 23&#125;;int i = 1;for(int age:ages)&#123; System.out.println(age); i++;&#125; 二维数组12345678910111213141516//声明和定义数据类型 [] [] 数组名 = new 数据类型[行的个数][列的个数]；//或者数据类型 [] [] 数组名；数组名 = new 数据类型[行的个数][列的个数]；//或者数据类型 [] [] = 数组名 = &#123;&#123;第一行值1， 第一行值2, ...&#125;&#123;第二行值1， 第二行值2，...&#125;...&#125;//通过下标访问二维数组数组名[行的索引][列的索引] = 值;","categories":[],"tags":[]},{"title":"各类快捷键","slug":"各类快捷键","date":"2019-12-01T12:16:05.000Z","updated":"2019-12-03T16:17:15.531Z","comments":true,"path":"2019/12/01/各类快捷键/","link":"","permalink":"https://www.soulauv.cn/2019/12/01/%E5%90%84%E7%B1%BB%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"VS code 常用快捷键 按键 作用 Ctrl + Shift + V 预览Markdown 文档 Ctrl + / 批量注释批量取消注释 Ctrl + k 接Ctrl + t 更换主题 Ctrl + Shift + P 打开命令行 Markdown 常用操作 操作 目的 ![avatar](图片路径) 插入图片 ``` ``` 连续三个反引号间插入代码块 ```java ``` ```后键入所使用语言实现代码高亮","text":"VS code 常用快捷键 按键 作用 Ctrl + Shift + V 预览Markdown 文档 Ctrl + / 批量注释批量取消注释 Ctrl + k 接Ctrl + t 更换主题 Ctrl + Shift + P 打开命令行 Markdown 常用操作 操作 目的 ![avatar](图片路径) 插入图片 ``` ``` 连续三个反引号间插入代码块 ```java ``` ```后键入所使用语言实现代码高亮 Linux 常用快捷键 命令 作用 全称 touch 创建新文件 Windows下常用快捷键 按键 作用 全称 Ctrl + Win + → 切换桌面 Win + V 打开剪切板 Tab 制表键 Tabulator key Ctrl + Shift + B 唤出Win10 表情输入界面","categories":[],"tags":[{"name":"VS code","slug":"VS-code","permalink":"https://www.soulauv.cn/tags/VS-code/"}]}]}